# -*- coding: utf-8 -*-
"""Fitness_chatbot_projem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/198y3gJzAQ6IuGHOyXwr0fTTMAE7Iv2QF
"""

# HÜCRE 1: En güncel ve uyumlu kütüphaneleri kurma
!pip install -U langchain langchain-core langchain-community langchain-google-genai -q
!pip install chromadb sentence-transformers langchain-text-splitters -q
print("Tüm kütüphaneler güncel ve uyumlu bir şekilde kuruldu.")

# Python Path'i düzeltme (önceki denemelerdeki kritik düzeltme)
import sys
import site

forced_path = '/usr/local/lib/python3.10/dist-packages'
if forced_path not in sys.path:
    sys.path.append(forced_path)
    print(f"Python arama yolu düzeltildi: {forced_path}")

print("Kurulum ve Python arama yolu düzeltmesi tamamlandı. HÜCRE 2'ye geçin.")

# HÜCRE 2: API Anahtarını Ayarlama
from google.colab import userdata
import os

# NOT: Lütfen API anahtarınızın Colab Secrets'ta 'GEMINI_API_KEY' adıyla kayıtlı olduğundan emin olun.
GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
os.environ['GEMINI_API_KEY'] = GEMINI_API_KEY

print("API Anahtarı başarıyla ayarlandı.")

# HÜCRE 3: Veri Setini Oluşturma
from langchain_google_genai import ChatGoogleGenerativeAI
from google.colab import userdata

GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", temperature=0.3, api_key=GEMINI_API_KEY)

prompt_text = """
Fitness ve vücut geliştirme üzerine kapsamlı bir veri seti oluştur.
Aşağıdaki her egzersiz için: Bench Press, Deadlift, Squat, Overhead Press, Barbell Row, Pull-up, Lunge.
Her egzersiz için: Adı, Nasıl Yapılır, Temel Kas Grupları, Önemli İpucu bilgilerini içermeli.
Cevabın sadece düz metin olsun.
"""

print("Veri seti oluşturuluyor...")
response = llm.invoke(prompt_text)
data = response.content

with open("egzersiz_veri.txt", "w", encoding="utf-8") as f:
    f.write(data)

print("Veri seti (egzersiz_veri.txt) başarıyla oluşturuldu ve kaydedildi.")

# YENİ HÜCRE: Tüm Veri Setini (Eski + Yeni) Kodla Yeniden Yazma

tum_veri_seti = """
KONU: Deadlift
Yapılışı:
1. Ayaklarınızı omuz genişliğinde açın ve barı ayaklarınıza yakın tutun.
2. Kalçanızı geriye itin ve sırtınızı düz tutarak barı kavrayın.
3. Göğsünüzü yukarı kaldırın, nefes alın ve bacaklarınızla yeri itin.
4. Barı bacaklarınıza yakın tutarak yukarı kalkın.
Çalışan Kaslar: Arka zincir (Hamstring, Kalça, Alt Sırt), Trapez, Ön Kol.
İpucu: Hareketi bacaklarınızla başlatın, sırtınızı kilit pozisyonuna getirin. Barı her zaman vücuda yakın tutun.

KONU: Squat
Yapılışı:
1. Barı trapez kaslarınızın üzerine rahatça yerleştirin.
2. Ayaklarınızı omuz genişliğinden biraz daha fazla açın.
3. Harekete kalçanızı geriye doğru iterek başlayın. Dizleriniz ayak parmaklarınızla aynı hizada olmalı.
4. Kalçanız dizlerinizin altına inene kadar inin (derinlik esneklik limitiniz kadardır).
Çalışan Kaslar: Quadriceps (Ön Bacak), Hamstring, Kalça.
İpucu: Yere sıkıca basarak dengenizi koruyun. Ağırlığı merkeze odaklayın ve dizlerinizi dışarı itin.

KONU: Bench Press
Yapılışı:
1. Sehpaya yatın, göz hizasına barı getirin. Kürek kemiklerinizi birbirine doğru sıkıştırın.
2. Barı omuz genişliğinden biraz daha açık bir tutuşla kavrayın.
3. Barı yavaşça göğsünüzün alt kısmına indirin. Dirsekleriniz vücudunuza 45-75 derece açıyla bakmalı.
4. Kontrollü bir şekilde barı yukarı itin.
Çalışan Kaslar: Pektoral (Göğüs), Ön Omuz, Triceps (Arka Kol).
İpucu: Kürek kemiklerini sehpaya kilitlemek ve ayakları yere sıkıca basmak kuvvet aktarımını artırır.

KONU: Barbell Row
Yapılışı:
1. Ayakları omuz genişliğinde açın ve barı diz hizasına kadar kaldırın.
2. Dizleri hafif kırın, gövdeyi 45 derece öne eğin ve sırtınızı düz tutun.
3. Barı göbeğinizin alt kısmına doğru çekin, kürek kemiklerinizi sıkın.
4. Yavaşça başlangıç pozisyonuna dönün.
Çalışan Kaslar: Latissimus Dorsi (Sırtın Geniş Kasları), Trapez, Biceps (Ön Kol).
İpucu: Çekiş sırasında dirseklerinizi vücudunuza yakın tutun ve sırt kaslarınızla çekmeyi odaklayın.

KONU: Overhead Press (Omuz Pres)
Yapılışı:
1. Ayakta veya oturarak, barı omuz hizasında tutun (ön omuzların hemen üstünde).
2. Barı başınızın üzerinden yukarı doğru itin, kollarınızı tam açın.
3. Barı yavaşça başlangıç pozisyonuna indirin.
Çalışan Kaslar: Deltoidler (Omuz kasları), Triceps.
İpucu: Vücudun merkez bölgesini (core) sıkı tutmak, sırtın geriye eğilmesini (bel çukurunun artmasını) engeller.

KONU: Lunge
Yapılışı:
1. Ayakta dik durun ve bir adım öne atın.
2. Gövdenizi dik tutarak kalçanızı aşağı indirin. Ön diziniz 90 derece bükülmeli ve ayak parmaklarınızı geçmemeli. Arka diziniz yere yaklaşmalı.
3. Ön ayağınızla yeri iterek başlangıç pozisyonuna dönün.
Çalışan Kaslar: Quadriceps, Hamstring, Kalça, Dengeleyici kaslar.
İpucu: Dengede kalmak için bakışınızı sabit bir noktaya odaklayın. Adımlarınızı çok geniş veya çok dar atmamaya dikkat edin.

KONU: Bicep Curl
Yapılışı:
1. Ayakta dik durun, dambılları avuç içleri yukarı bakacak şekilde tutun.
2. Dirseklerinizi vücudunuza yakın tutarak dambılları omuz hizasına kadar kaldırın. Sadece ön kol kaslarını kullanın.
3. Ağırlığı yavaşça başlangıç pozisyonuna indirin.
Çalışan Kaslar: Biceps.
İpucu: Hareketi yavaş ve kontrollü yapın. Dirseklerinizi sabitlemek omuzların devreye girmesini engeller.

--- EK BİLGİLER: BESLENME VE PROGRAMLAMA ---

KONU: Makro Besinler (Makrolar)
Tanım: Vücudun enerji ve temel yapı taşları için en büyük miktarda ihtiyaç duyduğu besin ögeleridir. Üç ana makro besin şunlardır:
1. Protein: Kas onarımı ve büyümesi için hayati öneme sahiptir.
   - Kalori Değeri: 1 gram = 4 kalori.
   - İpuçları: Kas kütlesi kazanmak veya korumak için vücut ağırlığının kilogramı başına 1.6 ila 2.2 gram tüketilmesi önerilir.
2. Karbonhidrat: Antrenman sırasında ve günlük yaşamda vücudun ana enerji kaynağıdır.
   - Kalori Değeri: 1 gram = 4 kalori.
   - İpuçları: Yoğun antrenman yapan sporcular için toplam kalori alımının %45-%65'ini oluşturmalıdır. Tam tahıllar ve sebzeler tercih edilmeli.
3. Yağlar (Lipitler): Hormon üretimi, organ koruması ve yağda çözünen vitaminlerin emilimi için gereklidir.
   - Kalori Değeri: 1 gram = 9 kalori.
   - İpuçları: Diyetin %20-%35'ini oluşturmalı. Sağlıklı yağ kaynakları (avokado, fındık, zeytinyağı) tercih edilmeli.

KONU: Supplementler (Takviyeler)
En Popüler Takviyeler:
1. Kreatin: Kas gücünü ve yüksek yoğunluklu egzersiz performansını artırdığı bilimsel olarak kanıtlanmış en etkili takviyedir.
   - Kullanım: Genellikle günlük 3-5 gram önerilir.
2. Whey Protein: Hızlı emilen bir protein kaynağıdır, özellikle antrenman sonrası kas onarımı için idealdir.
3. BCAA (Dallı Zincirli Amino Asitler): Yoğun antrenman sırasında kas yıkımını önlemeye yardımcı olabilir.
   - Not: Yeterli protein alımı varsa, BCAA çoğu zaman gereksizdir.

KONU: Antrenman Programı Türleri (Split)
1. Full Body (Tüm Vücut): Her seansta tüm ana kas gruplarını çalıştırır.
   - Kimler İçin İdeal: Yeni başlayanlar ve haftada 2-3 gün antrenman yapanlar. Kas iyileşmesine yeterli zaman tanır.
2. Push/Pull/Legs (PPL): İtme, çekme ve bacak hareketlerini farklı günlerde gruplar.
   - Tanım: Push (göğüs, omuz, tricep), Pull (sırt, biceps), Legs (bacaklar).
   - Kimler İçin İdeal: Haftada 4-6 gün antrenman yapan, daha ileri düzey sporcular.
3. Bro Split (Vücut Bölgesi Split): Her gün sadece bir veya iki kas grubunu çalıştırır (örn: Pazartesi Göğüs, Salı Bacak).
   - Kimler İçin İdeal: Geleneksel vücut geliştirme tarzını sevenler; her kas grubunu haftada bir kez çok yüksek hacimle yormak.
"""

# Dosyayı "yazma" modu ('w') ile açarak eski içeriği siler ve yenisini yazar.
try:
    with open('egzersiz_veri.txt', 'w', encoding='utf-8') as f:
        f.write(tum_veri_seti)
    print("✅ TÜM VERİ SETİ BAŞARIYLA YENİDEN OLUŞTURULDU.")

except Exception as e:
    print(f"KRİTİK HATA: Dosya yazma işlemi sırasında bir sorun oluştu: {e}")

# HÜCRE 4: Veriyi Parçalama
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import TextLoader

loader = TextLoader("egzersiz_veri.txt", encoding="utf-8")
documents = loader.load()

text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=1500, chunk_overlap=200, length_function=len
)
chunks = text_splitter.split_documents(documents)

print(f"Oluşturulan Parça Sayısı (Chunks): {len(chunks)}")
print("Başarılı: chunks listesi oluşturuldu.")

# HÜCRE 5: Vektörleştirme
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings

print("--- YEREL EMBEDDING MODELİ KULLANILIYOR ---")
embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")

print("\nVeri parçaları vektörleştiriliyor...")
vectorstore = Chroma.from_documents(
    documents=chunks,
    embedding=embeddings,
    persist_directory="./chroma_db"
)

print("\nBAŞARILI: Vektörleştirme tamamlandı ve ChromaDB'ye kaydedildi.")

# HÜCRE 6: RAG Zinciri Kurulumu ve Test (LCEL ZORLAMA)

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough, RunnableSequence
from langchain_core.output_parsers import StrOutputParser
from google.colab import userdata

# KRİTİK: create_chain fonksiyonlarını atmak için LCEL yapısını manuel kuruyoruz.
# YALNIZCA bu importların çalışması için tasarlanmıştır.

# LLM Kurulumu
GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", temperature=0.1, api_key=GEMINI_API_KEY)

# Retriever Kurulumu
retriever = vectorstore.as_retriever(search_kwargs={"k": 3})

# Prompt ve Zincir Oluşturma (LCEL)
prompt = ChatPromptTemplate.from_template("""
Aşağıdaki bağlamı kullanarak soruyu cevapla.
Cevabını yalnızca sağlanan bağlamdaki bilgilere dayandır.
Bağlamda cevap yoksa, "Bu konuda veri setimde bilgi bulunmamaktadır." diye cevap ver.

Bağlam: {context}

Soru: {input}
""")

# 1. Dokümanları birleştiren fonksiyon:
def format_docs(docs):
    return "\n\n".join(doc.page_content for doc in docs)

# 2. RAG Zincirini Manuel Olarak Kurma (RunnableSequence ile)
# Bu zincir:
# 1. Girişi alır.
# 2. Retriever'a gönderir (documents'ları getirir)
# 3. Prompt'u formatlar (context ve input'u doldurur)
# 4. LLM'i çağırır (cevap üretir)
# 5. Çıktıyı düz metne çevirir.

qa_chain = (
    {"context": retriever | format_docs, "input": RunnablePassthrough()}
    | prompt
    | llm
    | StrOutputParser()
)


# TEST SORGU
sorgu = "Deadlift egzersizini yaparken en çok hangi kas grupları çalışır ve bana en önemli ipucunu ver."
print(f"Sorgu: {sorgu}\n")

print("Gemini API'den RAG tabanlı cevap bekleniyor...")
# Artık qa_chain.invoke'a sadece input gönderilir.
cevap = qa_chain.invoke(sorgu)

print("-" * 50)
print("CEVAP:")
print(cevap) # Cevap artık doğrudan string olarak geliyor
print("-" * 50)

"""Bundan sonra Web Arayüzü için çalışacağım (b"""

# YENİ HÜCRE: Gradio Kurulumu
!pip install gradio -q
print("Gradio kütüphanesi kuruldu.")

# Modül hatalarını aşan son HÜCRE 6 yapısını yeniden kuralım.
# (Tekrar tekrar çalıştırmamak için tüm gerekli objelerin tanımlı olduğunu varsayıyoruz.)

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough, RunnableSequence
from langchain_core.output_parsers import StrOutputParser
from google.colab import userdata
from langchain_core.messages import HumanMessage, AIMessage

# Gerekli objelerin tanımlı olduğundan emin olmak için LLM ve Retriever'ı tekrar tanımlıyoruz.
# (HÜCRE 1'den HÜCRE 5'e kadar her şeyin çalışmış olması gerekir.)
GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", temperature=0.1, api_key=GEMINI_API_KEY)
# vectorstore objesinin HÜCRE 5'ten geldiğini varsayıyoruz.
retriever = vectorstore.as_retriever(search_kwargs={"k": 3})

# format_docs fonksiyonunu tanımla (LCEL için gerekli)
def format_docs(docs):
    return "\n\n".join(doc.page_content for doc in docs)

# Prompt'u tanımla
rag_prompt = ChatPromptTemplate.from_template("""
Aşağıdaki bağlamı kullanarak soruyu cevapla.
Cevabını yalnızca sağlanan bağlamdaki bilgilere dayandır.
Bağlamda cevap yoksa, "Bu konuda veri setimde bilgi bulunmamaktadır." diye cevap ver.

Bağlam: {context}

Soru: {input}
""")

# RAG Zincirini Kurma (HÜCRE 6'daki en son başarılı LCEL yapısı)
qa_chain = (
    {"context": retriever | format_docs, "input": RunnablePassthrough()}
    | rag_prompt
    | llm
    | StrOutputParser()
)

# YENİ HÜCRE: Gradio Arayüz Kodu ve Fonksiyon Tanımı

import gradio as gr

# Bu fonksiyon, Gradio'dan gelen mesajı alır ve RAG zincirine gönderir.
# Şu anki RAG zincirimiz tek dönüşlü (hafızasız) olduğu için, chat_history'yi sadece gösterimde kullanacağız.
def rag_chat_interface(message, history):
    # History (geçmiş) Gradio'dan gelir, ancak RAG zincirimiz sadece son soruyu (message) kullanır.

    # RAG Zincirine gönderme
    # qa_chain objesi, LCEL yapısı gereği tek bir dictionary {"input": soru} bekler.
    response = qa_chain.invoke(message)

    # Gradio'ya cevabı döndürme
    return response

# Gradio Arayüz Tanımı
gr.ChatInterface(
    fn=rag_chat_interface,
    title="Fitness Bilgi Asistanı (RAG-Gemini)",
    theme="soft",
    description="Fitness veri setinizi (Deadlift, Squat vb.) kullanarak sorularınızı cevaplayan yapay zeka.",
    examples=[
        "Squat yaparken en önemli ipucu nedir?",
        "Barbell Row egzersizinin temel kas grupları nelerdir?",
        "Deadlift yaparken sırtımı nasıl korurum?",
    ]
).queue().launch(share=True)

"""Buradan sonraki hücre readme oluşturmak içindir."""

# YENİ HÜCRE: README.md Dosyasını Kullanıcının İsteğine Göre Güncelleme

readme_content_kullanici = """
# Fitness Bilgi Asistanı (RAG - Gemini Destekli)

Bu proje, **Retrieval Augmented Generation (RAG)** mimarisi ile
geliştirilmiş küçük çaplı bir fitness chatbotudur.

## Projenin Amacı

Projenin amacı, veri setinde yer alan bilgilere
göre bazı egzersizler (örnek: deadlift, squat, bench press vb.) ve beslenme hakkında
sorulan soruları doğru ve güvenilir bir şekilde cevaplamaktır.

## Özellikler

* **Veri Kapsamı:** Beslenme ve temel egzersizler hakkında detaylı veri.
* **Yapay Zeka Modeli:** Google **Gemini API** kullanılır.
* **Mimari:** **LangChain LCEL** (Expression Language) ile oluşturulmuş RAG zinciri.
* **Veri Yönetimi:** **Vektörleştirme** ile veriye hızlı erişim.

## Çalıştırmak İçin

1.  **Colab not defterindeki hücreleri sırayla tek tek çalıştırın.**
2.  **API Anahtarı Kontrolü:** Eğer API anahtarı çalışmazsa, soldaki kilit simgesine tıklayın ve API anahtarınızın doğru tanımlandığından emin olun.
3.  **Arayüze Geçiş:** Tüm hücreler çalıştırılınca (son aşamada) Gradio arayüzü otomatik olarak açılacaktır.
4.  **Sorgulama:** İsterseniz verilen 3 örnek sorgudan birini veya veri setinin içinde yer alacak şekilde istediğiniz soruyu sorabilirsiniz.

## Çözüm Mimarisi
**Çözülen Problem: LLM Halüsinasyonu**

**Projemiz, LLM'e cevap vermeden önce güvenilir bir kaynaktan (kendi veri setimizden) ilgili bilgiyi bulmasını zorunlu kılarak bu problemi ortadan kaldırır.**

**https://github.com/NisanIrmakMarangoz**

"""

try:
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content_kullanici)
    print("✅ 'README.md' dosyası başarıyla sizin isteğiniz doğrultusunda güncellendi.")
    print("Colab'ın solundaki 'Dosyalar' menüsünden kontrol edebilirsiniz.")

except Exception as e:
    print(f"HATA: README dosyası güncellenemedi: {e}")

"""bundan sonraki hücre, kılavuz içindir.

"""

# YENİ HÜCRE: PROJECT_REPORT.md Dosyasını Görsel Referansları ile Yeniden Oluşturma

project_report_content_with_images = """
# 🚀 FITNESS BİLGİ ASİSTANI - PROJE RAPORU VE ÇALIŞMA KILAVUZU

Bu rapor, projenin teknik mimarisini, kullanılan teknolojileri ve canlı web arayüzünün nasıl kullanılacağını detaylandırmaktadır.

---

## 📐 BÖLÜM A: ÇÖZÜM MİMARİSİ (RAG)

### A.1 Mimarinin Çözdüğü Temel Problem
**Problem:** Büyük Dil Modellerinin (LLM) uydurma (halüsinasyon) eğilimi ve özel/niş konularda bilgi yetersizliği.
**RAG Çözümü:** LLM (Gemini 2.5 Flash), cevap vermeden önce **güvenilir, özel veri setimizden** ilgili bilgiyi (Bağlamı) bulmaya zorlanır. Bu, doğruluk oranını artırır ve güncel kalmayı sağlar.

### A.2 Kullanılan Teknolojiler
| Kategori | Teknoloji | Rolü |
| :--- | :--- | :--- |
| **Büyük Dil Modeli (LLM)** | **Google Gemini 2.5 Flash** | Nihai cevabı, sağlanan bağlama göre üretir. |
| **Orkestrasyon** | **LangChain (LCEL)** | RAG zincirinin adımlarını (Prompt, LLM, Retriever) yöneten çerçevedir. |
| **Vektör DB** | **ChromaDB** | Veri parçalarının vektör formunda tutulduğu yerel veritabanı. |
| **Vektörleştirme** | **Sentence-Transformers** | Metinleri arama yapılabilir sayı dizilerine (Vektörlere) çevirir. |
| **Web Arayüzü** | **Gradio** | Son kullanıcının erişebileceği sohbet arayüzünü sağlar. |

### A.3 RAG Akış Şeması
Proje, her sorguda şu akışı izler:
Soru $\rightarrow$ ChromaDB (Arama) $\rightarrow$ İlgili Veri Parçaları $\rightarrow$ Prompt Şablonu $\rightarrow$ Gemini $\rightarrow$ Nihai Cevap

---

## 🌐 BÖLÜM B: WEB ARAYÜZÜ & PRODUCT KILAVUZU (Test ve Kabiliyetler)

Bu bölüm, canlı uygulamanın nasıl kullanılacağını, hangi kabiliyetlere sahip olduğunu ve test senaryolarını içerir.

### B.1 Uygulama Linki (Deploy Link)
Canlı uygulamaya erişim linki aşağıdadır. https://b88169486e8cfc1bb8.gradio.live


### B.2 Kullanıcı Akışı ve Çalışma Prensibi

Kullanıcı, Gradio arayüzünde sadece soru yazar. Arka planda sistem, sorulan konuya **yalnızca kendi bilgi havuzunda** arama yaparak cevap bulur.

**Arayüz Görünümü (Boş Başlangıç):**
*https://github.com/NisanIrmakMarangoz/images-/blob/main/Bosarayuz.png*

**Çalışma Akışı Özeti:**
1.  **Girdi:** Kullanıcı Fitness, Beslenme veya Programlama sorusu sorar.
2.  **Arama:** RAG sistemi, özel veri setimizde en uygun bilgiyi (Bağlamı) bulur.
3.  **Cevap Üretme:** Gemini, bu bağlamı kullanarak, dışarıdan bilgi eklemeden cevabı üretir.
4.  **Hata Yönetimi:** Bilgi seti dışında kalan sorularda, sistem **"Bu konuda veri setimde bilgi bulunmamaktadır."** uyarısıyla güvenilirliğini korur.

### B.3 Projenin Temel Kabiliyetleri ve Test Senaryoları

Projenin başarıyla çalıştığını göstermek için aşağıdaki testleri arayüzde uygulayın:

| Kabiliyet Alanı | Test Sorusu | Amacı (Kanıtı) |
| :--- | :--- | :--- |
| **Egzersiz Uzmanlığı** | "Bench Press'te hangi kaslar çalışır?" | Temel veri setindeki spesifik bilgiyi doğru getirdiğini kanıtlar. |
| **Genişletilmiş Bilgi (Beslenme)** | "Kreatin takviyesinin faydaları ve günlük dozu nedir?" | Sonradan eklenen ve vektörleştirilen yeni bilgiyi kullanabildiğini test eder. |
| **Programlama Kapsamı** | "Push/Pull/Legs sistemi kimler için uygundur?" | Antrenman programlama bilgisini sunabildiğini gösterir. |

**Örnek Başarılı Cevap:**
*https://github.com/NisanIrmakMarangoz/images-/blob/main/basarilicevap1.png*
*https://github.com/NisanIrmakMarangoz/images-/blob/main/basarilicevap2.png*

**Halüsinasyon Önleme (Hata Yönetimi):**
| Kabiliyet Alanı | Test Sorusu | Amacı (Kanıtı) |
| :--- | :--- | :--- |
| **Halüsinasyon Önleme** | "En popüler 5 yoga pozu nedir?" | Sistemin bilmediği bir alanda **uydurmadığını** göstererek RAG'ın ana faydasını kanıtlar. |

**Örnek Hata Yönetimi:**
*https://github.com/NisanIrmakMarangoz/images-/blob/main/hatamesaji.png*


"""

# Dosyayı "yazma" modu ('w') ile oluşturur ve içeriği yazar.
try:
    with open('PROJECT_REPORT.md', 'w', encoding='utf-8') as f:
        f.write(project_report_content_with_images)
    print("✅ 'PROJECT_REPORT.md' dosyası, tüm mimari, test kılavuzu ve görsel referansları ile başarıyla güncellendi.")
    print("GitHub'a yüklemeden önce lütfen görsel yollarını kontrol edin!")

except Exception as e:
    print(f"HATA: Proje raporu dosyası oluşturulamadı: {e}")